{"uid":"8607533b98cc0611","name":"test_login_parabank[testuser-password-juan-lopez]","fullName":"parabank_front.tests.test_login#test_login_parabank","historyId":"feaca7dbdc400b1b321e4b8c8ded718f","time":{"start":1748487349076,"stop":1748487359568,"duration":10492},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"44f935ecee719da2c289ee42d1930823\")>, username = 'testuser', password = 'password', name = 'juan', last_name = 'lopez'\n\n    @pytest.mark.parametrize(\n        ['username', 'password', 'name', 'last_name'],\n        [('testuser', 'password', 'juan', 'lopez'),]\n    )\n    # el test usa como argumento a la funcion que maneja la instancia del webdriver\n    # pytest maneja que si hay argumentos, va a fijarse en los fixtures\n    def test_login_parabank(browser, username, password, name, last_name):\n    \n        # creo los dos objetos de las paginas que voy a usar\n        home_page = ParabankHomePage(browser)\n        overview_page = ParabankOverviewPage(browser)\n    \n        # Given la pagina de parabank esta activa\n        home_page.load()\n        logger.info(f'pagina cargada')\n    \n        # WHEN el user ingresa credenciales\n        home_page.login(username, password)\n>       WebDriverWait(browser, 10).until(\n            ec.title_is('ParaBank | Accounts Overview'))\n\nparabank_front/tests/test_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"44f935ecee719da2c289ee42d1930823\")>, method = <function title_is.<locals>._predicate at 0x7f9ff698cdc0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1748487348448,"stop":1748487349074,"duration":626},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"config","time":{"start":1748487348448,"stop":1748487348448,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"44f935ecee719da2c289ee42d1930823\")>, username = 'testuser', password = 'password', name = 'juan', last_name = 'lopez'\n\n    @pytest.mark.parametrize(\n        ['username', 'password', 'name', 'last_name'],\n        [('testuser', 'password', 'juan', 'lopez'),]\n    )\n    # el test usa como argumento a la funcion que maneja la instancia del webdriver\n    # pytest maneja que si hay argumentos, va a fijarse en los fixtures\n    def test_login_parabank(browser, username, password, name, last_name):\n    \n        # creo los dos objetos de las paginas que voy a usar\n        home_page = ParabankHomePage(browser)\n        overview_page = ParabankOverviewPage(browser)\n    \n        # Given la pagina de parabank esta activa\n        home_page.load()\n        logger.info(f'pagina cargada')\n    \n        # WHEN el user ingresa credenciales\n        home_page.login(username, password)\n>       WebDriverWait(browser, 10).until(\n            ec.title_is('ParaBank | Accounts Overview'))\n\nparabank_front/tests/test_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"44f935ecee719da2c289ee42d1930823\")>, method = <function title_is.<locals>._predicate at 0x7f9ff698cdc0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[],"attachments":[{"uid":"140e0e99bf6fe1e3","name":"log","source":"140e0e99bf6fe1e3.txt","type":"text/plain","size":450},{"uid":"c2545e0156b7dfac","name":"stderr","source":"c2545e0156b7dfac.txt","type":"text/plain","size":300}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1748487359603,"stop":1748487359674,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"parabank_front.tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"user-VivoBook-ASUSLaptop-X512JP-X512JP"},{"name":"thread","value":"359241-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"parabank_front.tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"last_name","value":"'lopez'"},{"name":"name","value":"'juan'"},{"name":"password","value":"'password'"},{"name":"username","value":"'testuser'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8607533b98cc0611.json","parameterValues":["'lopez'","'juan'","'password'","'testuser'"]}