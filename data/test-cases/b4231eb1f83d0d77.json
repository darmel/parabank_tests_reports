{"uid":"b4231eb1f83d0d77","name":"test_login_fail","fullName":"parabank_front.tests.test_login#test_login_fail","historyId":"64bbad5e0adf01a10e6715bcc11285a1","time":{"start":1748353464720,"stop":1748353464911,"duration":191},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=136.0.7103.113)\nStacktrace:\n#0 0x565349c1171a <unknown>\n#1 0x5653496b40a0 <unknown>\n#2 0x5653496ab177 <unknown>\n#3 0x56534969c199 <unknown>\n#4 0x56534969de8d <unknown>\n#5 0x56534969c52e <unknown>\n#6 0x56534969bece <unknown>\n#7 0x56534969bba2 <unknown>\n#8 0x5653496999ef <unknown>\n#9 0x56534969a1aa <unknown>\n#10 0x5653496b75d9 <unknown>\n#11 0x565349751eb5 <unknown>\n#12 0x56534972b3a2 <unknown>\n#13 0x5653497512a0 <unknown>\n#14 0x56534972b173 <unknown>\n#15 0x5653496f7d4b <unknown>\n#16 0x5653496f89b1 <unknown>\n#17 0x565349bd68cb <unknown>\n#18 0x565349bda7ca <unknown>\n#19 0x565349bbe622 <unknown>\n#20 0x565349bdb354 <unknown>\n#21 0x565349ba345f <unknown>\n#22 0x565349bff4f8 <unknown>\n#23 0x565349bff6d6 <unknown>\n#24 0x565349c10586 <unknown>\n#25 0x7fe1e2878609 start_thread","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d64932269b553c372e3172804c5c7a8\")>\n\n    def test_login_fail(browser):\n        username = \"fakeuser\"\n        password = \"fakepass\"\n        # creo los dos objetos de las paginas que voy a usar\n        home_page = ParabankHomePage(browser)\n    \n        # Given la pagina de parabank esta activa\n>       home_page.load()\n\nparabank_front/tests/test_login.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nparabank_front/pages/home.py:24: in load\n    self.browser.get(self.URL)\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5114d28610>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...wn>\\\\n#23 0x565349bff6d6 \\\\u003Cunknown>\\\\n#24 0x565349c10586 \\\\u003Cunknown>\\\\n#25 0x7fe1e2878609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=136.0.7103.113)\nE       Stacktrace:\nE       #0 0x565349c1171a <unknown>\nE       #1 0x5653496b40a0 <unknown>\nE       #2 0x5653496ab177 <unknown>\nE       #3 0x56534969c199 <unknown>\nE       #4 0x56534969de8d <unknown>\nE       #5 0x56534969c52e <unknown>\nE       #6 0x56534969bece <unknown>\nE       #7 0x56534969bba2 <unknown>\nE       #8 0x5653496999ef <unknown>\nE       #9 0x56534969a1aa <unknown>\nE       #10 0x5653496b75d9 <unknown>\nE       #11 0x565349751eb5 <unknown>\nE       #12 0x56534972b3a2 <unknown>\nE       #13 0x5653497512a0 <unknown>\nE       #14 0x56534972b173 <unknown>\nE       #15 0x5653496f7d4b <unknown>\nE       #16 0x5653496f89b1 <unknown>\nE       #17 0x565349bd68cb <unknown>\nE       #18 0x565349bda7ca <unknown>\nE       #19 0x565349bbe622 <unknown>\nE       #20 0x565349bdb354 <unknown>\nE       #21 0x565349ba345f <unknown>\nE       #22 0x565349bff4f8 <unknown>\nE       #23 0x565349bff6d6 <unknown>\nE       #24 0x565349c10586 <unknown>\nE       #25 0x7fe1e2878609 start_thread\n\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1748353464037,"stop":1748353464719,"duration":682},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"config","time":{"start":1748353464037,"stop":1748353464037,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=136.0.7103.113)\nStacktrace:\n#0 0x565349c1171a <unknown>\n#1 0x5653496b40a0 <unknown>\n#2 0x5653496ab177 <unknown>\n#3 0x56534969c199 <unknown>\n#4 0x56534969de8d <unknown>\n#5 0x56534969c52e <unknown>\n#6 0x56534969bece <unknown>\n#7 0x56534969bba2 <unknown>\n#8 0x5653496999ef <unknown>\n#9 0x56534969a1aa <unknown>\n#10 0x5653496b75d9 <unknown>\n#11 0x565349751eb5 <unknown>\n#12 0x56534972b3a2 <unknown>\n#13 0x5653497512a0 <unknown>\n#14 0x56534972b173 <unknown>\n#15 0x5653496f7d4b <unknown>\n#16 0x5653496f89b1 <unknown>\n#17 0x565349bd68cb <unknown>\n#18 0x565349bda7ca <unknown>\n#19 0x565349bbe622 <unknown>\n#20 0x565349bdb354 <unknown>\n#21 0x565349ba345f <unknown>\n#22 0x565349bff4f8 <unknown>\n#23 0x565349bff6d6 <unknown>\n#24 0x565349c10586 <unknown>\n#25 0x7fe1e2878609 start_thread","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d64932269b553c372e3172804c5c7a8\")>\n\n    def test_login_fail(browser):\n        username = \"fakeuser\"\n        password = \"fakepass\"\n        # creo los dos objetos de las paginas que voy a usar\n        home_page = ParabankHomePage(browser)\n    \n        # Given la pagina de parabank esta activa\n>       home_page.load()\n\nparabank_front/tests/test_login.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nparabank_front/pages/home.py:24: in load\n    self.browser.get(self.URL)\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5114d28610>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...wn>\\\\n#23 0x565349bff6d6 \\\\u003Cunknown>\\\\n#24 0x565349c10586 \\\\u003Cunknown>\\\\n#25 0x7fe1e2878609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=136.0.7103.113)\nE       Stacktrace:\nE       #0 0x565349c1171a <unknown>\nE       #1 0x5653496b40a0 <unknown>\nE       #2 0x5653496ab177 <unknown>\nE       #3 0x56534969c199 <unknown>\nE       #4 0x56534969de8d <unknown>\nE       #5 0x56534969c52e <unknown>\nE       #6 0x56534969bece <unknown>\nE       #7 0x56534969bba2 <unknown>\nE       #8 0x5653496999ef <unknown>\nE       #9 0x56534969a1aa <unknown>\nE       #10 0x5653496b75d9 <unknown>\nE       #11 0x565349751eb5 <unknown>\nE       #12 0x56534972b3a2 <unknown>\nE       #13 0x5653497512a0 <unknown>\nE       #14 0x56534972b173 <unknown>\nE       #15 0x5653496f7d4b <unknown>\nE       #16 0x5653496f89b1 <unknown>\nE       #17 0x565349bd68cb <unknown>\nE       #18 0x565349bda7ca <unknown>\nE       #19 0x565349bbe622 <unknown>\nE       #20 0x565349bdb354 <unknown>\nE       #21 0x565349ba345f <unknown>\nE       #22 0x565349bff4f8 <unknown>\nE       #23 0x565349bff6d6 <unknown>\nE       #24 0x565349c10586 <unknown>\nE       #25 0x7fe1e2878609 start_thread\n\nvenv-automation/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","steps":[],"attachments":[{"uid":"b45aaaeae336430","name":"log","source":"b45aaaeae336430.txt","type":"text/plain","size":389}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1748353464943,"stop":1748353465000,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"parabank_front.tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"user-VivoBook-ASUSLaptop-X512JP-X512JP"},{"name":"thread","value":"510667-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"parabank_front.tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b4231eb1f83d0d77.json","parameterValues":[]}